// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -package service -source service.go -destination ./mock_test.go -typed
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	io "io"
	reflect "reflect"

	domain "github.com/gsiffert/fetch/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockDisk is a mock of Disk interface.
type MockDisk struct {
	ctrl     *gomock.Controller
	recorder *MockDiskMockRecorder
}

// MockDiskMockRecorder is the mock recorder for MockDisk.
type MockDiskMockRecorder struct {
	mock *MockDisk
}

// NewMockDisk creates a new mock instance.
func NewMockDisk(ctrl *gomock.Controller) *MockDisk {
	mock := &MockDisk{ctrl: ctrl}
	mock.recorder = &MockDiskMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDisk) EXPECT() *MockDiskMockRecorder {
	return m.recorder
}

// NewPageWriter mocks base method.
func (m *MockDisk) NewPageWriter(ctx context.Context, name string) (io.WriteCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewPageWriter", ctx, name)
	ret0, _ := ret[0].(io.WriteCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewPageWriter indicates an expected call of NewPageWriter.
func (mr *MockDiskMockRecorder) NewPageWriter(ctx, name any) *MockDiskNewPageWriterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewPageWriter", reflect.TypeOf((*MockDisk)(nil).NewPageWriter), ctx, name)
	return &MockDiskNewPageWriterCall{Call: call}
}

// MockDiskNewPageWriterCall wrap *gomock.Call
type MockDiskNewPageWriterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDiskNewPageWriterCall) Return(arg0 io.WriteCloser, arg1 error) *MockDiskNewPageWriterCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDiskNewPageWriterCall) Do(f func(context.Context, string) (io.WriteCloser, error)) *MockDiskNewPageWriterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDiskNewPageWriterCall) DoAndReturn(f func(context.Context, string) (io.WriteCloser, error)) *MockDiskNewPageWriterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockFetcher is a mock of Fetcher interface.
type MockFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockFetcherMockRecorder
}

// MockFetcherMockRecorder is the mock recorder for MockFetcher.
type MockFetcherMockRecorder struct {
	mock *MockFetcher
}

// NewMockFetcher creates a new mock instance.
func NewMockFetcher(ctrl *gomock.Controller) *MockFetcher {
	mock := &MockFetcher{ctrl: ctrl}
	mock.recorder = &MockFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFetcher) EXPECT() *MockFetcherMockRecorder {
	return m.recorder
}

// Fetch mocks base method.
func (m *MockFetcher) Fetch(ctx context.Context, site string) (*FetchedItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", ctx, site)
	ret0, _ := ret[0].(*FetchedItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockFetcherMockRecorder) Fetch(ctx, site any) *MockFetcherFetchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockFetcher)(nil).Fetch), ctx, site)
	return &MockFetcherFetchCall{Call: call}
}

// MockFetcherFetchCall wrap *gomock.Call
type MockFetcherFetchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFetcherFetchCall) Return(arg0 *FetchedItem, arg1 error) *MockFetcherFetchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFetcherFetchCall) Do(f func(context.Context, string) (*FetchedItem, error)) *MockFetcherFetchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFetcherFetchCall) DoAndReturn(f func(context.Context, string) (*FetchedItem, error)) *MockFetcherFetchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockMetaDataRepository is a mock of MetaDataRepository interface.
type MockMetaDataRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMetaDataRepositoryMockRecorder
}

// MockMetaDataRepositoryMockRecorder is the mock recorder for MockMetaDataRepository.
type MockMetaDataRepositoryMockRecorder struct {
	mock *MockMetaDataRepository
}

// NewMockMetaDataRepository creates a new mock instance.
func NewMockMetaDataRepository(ctrl *gomock.Controller) *MockMetaDataRepository {
	mock := &MockMetaDataRepository{ctrl: ctrl}
	mock.recorder = &MockMetaDataRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetaDataRepository) EXPECT() *MockMetaDataRepositoryMockRecorder {
	return m.recorder
}

// ByIDs mocks base method.
func (m *MockMetaDataRepository) ByIDs(ctx context.Context, ids []domain.PageID) ([]domain.MetaData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByIDs", ctx, ids)
	ret0, _ := ret[0].([]domain.MetaData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByIDs indicates an expected call of ByIDs.
func (mr *MockMetaDataRepositoryMockRecorder) ByIDs(ctx, ids any) *MockMetaDataRepositoryByIDsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByIDs", reflect.TypeOf((*MockMetaDataRepository)(nil).ByIDs), ctx, ids)
	return &MockMetaDataRepositoryByIDsCall{Call: call}
}

// MockMetaDataRepositoryByIDsCall wrap *gomock.Call
type MockMetaDataRepositoryByIDsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMetaDataRepositoryByIDsCall) Return(arg0 []domain.MetaData, arg1 error) *MockMetaDataRepositoryByIDsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMetaDataRepositoryByIDsCall) Do(f func(context.Context, []domain.PageID) ([]domain.MetaData, error)) *MockMetaDataRepositoryByIDsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMetaDataRepositoryByIDsCall) DoAndReturn(f func(context.Context, []domain.PageID) ([]domain.MetaData, error)) *MockMetaDataRepositoryByIDsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Save mocks base method.
func (m *MockMetaDataRepository) Save(ctx context.Context, metaData domain.MetaData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, metaData)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockMetaDataRepositoryMockRecorder) Save(ctx, metaData any) *MockMetaDataRepositorySaveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockMetaDataRepository)(nil).Save), ctx, metaData)
	return &MockMetaDataRepositorySaveCall{Call: call}
}

// MockMetaDataRepositorySaveCall wrap *gomock.Call
type MockMetaDataRepositorySaveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMetaDataRepositorySaveCall) Return(arg0 error) *MockMetaDataRepositorySaveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMetaDataRepositorySaveCall) Do(f func(context.Context, domain.MetaData) error) *MockMetaDataRepositorySaveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMetaDataRepositorySaveCall) DoAndReturn(f func(context.Context, domain.MetaData) error) *MockMetaDataRepositorySaveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
